"stages":
- "test"
- "build"
- "publish"
- "release"
"checkCiRender":
  image:
    name: "gradle:8.2.1"
  rules:
  - if: "$CI_PIPELINE_SOURCE =~ /^push$/"
  script:
  - "export OLD=$(cat .gitlab-ci-generated.yml)"
  - "gradle renderCi"
  - "export NEW=$(cat .gitlab-ci-generated.yml)"
  - "echo '#!/bin/sh' > compare_script.sh"
  - "echo 'if [ \"$OLD\" != \"$NEW\" ]; then' >> compare_script.sh"
  - "echo ' echo Please render your Gitlab Ci Changes' >> compare_script.sh"
  - "echo ' exit 1' >> compare_script.sh"
  - "echo 'fi' >> compare_script.sh"
  - "chmod +x ./compare_script.sh"
  - "./compare_script.sh"
"test":
  image:
    name: "gradle:8.2.1"
  stage: "test"
  script:
  - "gradle check"
"docker-build":
  image:
    name: "docker"
  stage: "build"
  services:
  - name: "docker:dind"
  rules:
  - if: "$CI_COMMIT_BRANCH =~ /^dev$/"
  - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  - if: "$CI_COMMIT_TAG =~ /^\\d+\\.\\d+\\.\\d+-RC\\d+$/ && $CI_PIPELINE_SOURCE =~\
      \ /^push$/"
  - if: "$CI_COMMIT_TAG =~ /^\\d+\\.\\d+\\.\\d+$/ && $CI_PIPELINE_SOURCE =~ /^push$/"
  script:
  - "docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA -f ./app/Dockerfile ."
  - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  - "docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
"docker-publish-dev":
  image:
    name: "docker"
  stage: "publish"
  services:
  - name: "docker:dind"
  needs:
  - job: "docker-build"
  rules:
  - if: "$CI_COMMIT_BRANCH =~ /^dev$/"
  script:
  - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  - "docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
  - "docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA rbbl/genre-police:dev"
  - "docker login -u $DOCKERHUB_USER -p $DOCKERHUB_ACCESS_TOKEN docker.io"
  - "docker push rbbl/genre-police:dev"
"docker-publish-master":
  image:
    name: "docker"
  stage: "publish"
  services:
  - name: "docker:dind"
  needs:
  - job: "docker-build"
  rules:
  - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  script:
  - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  - "docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
  - "docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA rbbl/genre-police:latest"
  - "docker login -u $DOCKERHUB_USER -p $DOCKERHUB_ACCESS_TOKEN docker.io"
  - "docker push rbbl/genre-police:latest"
"docker-publish-release-candidate":
  image:
    name: "docker"
  stage: "publish"
  services:
  - name: "docker:dind"
  needs:
  - job: "docker-build"
  rules:
  - if: "$CI_COMMIT_TAG =~ /^\\d+\\.\\d+\\.\\d+-RC\\d+$/ && $CI_PIPELINE_SOURCE =~\
      \ /^push$/"
  script:
  - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  - "docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
  - "docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA rbbl/genre-police:$CI_COMMIT_TAG"
  - "docker login -u $DOCKERHUB_USER -p $DOCKERHUB_ACCESS_TOKEN docker.io"
  - "docker push rbbl/genre-police:$CI_COMMIT_TAG"
"docker-publish-release":
  image:
    name: "docker"
  stage: "publish"
  services:
  - name: "docker:dind"
  needs:
  - job: "docker-build"
  rules:
  - if: "$CI_COMMIT_TAG =~ /^\\d+\\.\\d+\\.\\d+$/ && $CI_PIPELINE_SOURCE =~ /^push$/"
  script:
  - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  - "docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
  - "docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA rbbl/genre-police:$CI_COMMIT_TAG"
  - "docker login -u $DOCKERHUB_USER -p $DOCKERHUB_ACCESS_TOKEN docker.io"
  - "docker push rbbl/genre-police:$CI_COMMIT_TAG"
".helm":
  image:
    name: "fedora"
  stage: "publish"
  before_script:
  - "dnf in -y openssl"
  - "curl -fsLO https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}\
    \ && mv ${BINARY} /usr/bin/yq && chmod +x /usr/bin/yq"
  - "curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3"
  - "chmod 700 get_helm.sh"
  - "./get_helm.sh"
  - "yq -i \".appVersion = \\\"$CI_COMMIT_TAG\\\"\" helm/genre-police/Chart.yaml"
  - "yq -i \".version = \\\"$CHART_VERSION\\\"\" helm/genre-police/Chart.yaml"
  - "cat helm/genre-police/Chart.yaml"
  - "helm repo add bitnami https://charts.bitnami.com/bitnami"
  - "helm dependency build helm/genre-police"
  - "helm package helm/genre-police"
  variables:
    "VERSION": "v4.33.2"
    "BINARY": "yq_linux_amd64"
"helm-publish-release":
  extends:
  - ".helm"
  rules:
  - if: "$CI_COMMIT_TAG =~ /^\\d+\\.\\d+\\.\\d+$/ && $CI_PIPELINE_SOURCE =~ /^web$/"
  script:
  - "curl -fs --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form \"chart=@genre-police-$CHART_VERSION.tgz\"\
    \ ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/stable/charts"
  - "curl -fs --user $JFROG_USERNAME:$JFROG_API_KEY -T genre-police-$CHART_VERSION.tgz\
    \ https://rbbl.jfrog.io/artifactory/gp-helm/$CHART_VERSION.tgz"
"helm-publish-release-candidate":
  extends:
  - ".helm"
  rules:
  - if: "$CI_COMMIT_TAG =~ /^\\d+\\.\\d+\\.\\d+-RC\\d+$/ && $CI_PIPELINE_SOURCE =~\
      \ /^web$/"
  script:
  - "curl -fs --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form \"chart=@genre-police-$CHART_VERSION.tgz\"\
    \ ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/dev/charts"
  - "curl -fs --user $JFROG_USERNAME:$JFROG_API_KEY -T genre-police-$CHART_VERSION.tgz\
    \ https://rbbl.jfrog.io/artifactory/gp-helm/$CHART_VERSION.tgz"
"create-release":
  image:
    name: "registry.gitlab.com/gitlab-org/release-cli:latest"
  stage: "release"
  rules:
  - if: "$CI_COMMIT_TAG =~ /^\\d+\\.\\d+\\.\\d+$/ && $CI_PIPELINE_SOURCE =~ /^push$/"
  script:
  - "echo 'Running the release job.'"
  release:
    tag_name: "$CI_COMMIT_TAG"
    name: "$CI_COMMIT_TAG"
    description: "Release $CI_COMMIT_TAG"